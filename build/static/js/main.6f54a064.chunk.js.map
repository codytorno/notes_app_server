{"version":3,"sources":["../../../notes_app_react/src/components/Note.js","../../../notes_app_react/src/components/Notification.js","../../../notes_app_react/src/components/Footer.js","../../../notes_app_react/src/services/notes.js","../../../notes_app_react/src/App.js","../../../notes_app_react/src/index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","services_notes","axios","get","then","res","data","newObject","post","id","put","concat","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","console","log","noteServices","initialNotes","length","notesToShow","filter","components_Notification","value","onChange","event","target","type","preventDefault","noteObject","date","Date","toISOString","Math","random","returnedNote","map","components_Note","key","find","n","changedNote","objectSpread","catch","error","setTimeout","handlebuttonToggle","components_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6f54a064.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: \"green\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 16,\r\n  };\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Cody Torno, 2021</em>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((res) => res.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((res) => res.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((res) => res.data);\r\n};\r\nexport default { getAll, create, update };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Note from \"./components/Note\";\r\nimport Notification from \"./components/Notification\";\r\nimport Footer from \"./components/Footer\";\r\nimport noteServices from \"./services/notes\";\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState(\"a new note...\");\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  const updateNotes = () => {\r\n    console.log(\"getting notes\");\r\n    noteServices.getAll().then((initialNotes) => {\r\n      setNotes(initialNotes);\r\n      console.log(\"notes updated\");\r\n    });\r\n  };\r\n\r\n  useEffect(updateNotes, []);\r\n  console.log(\"render\", notes.length, \"notes\");\r\n\r\n  // Event Handler -> Adds a note to the notes state variable\r\n  const addNote = (event) => {\r\n    console.log(\"adding note to db\");\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString,\r\n      important: Math.random() < 0.5,\r\n    };\r\n\r\n    noteServices.create(noteObject).then((returnedNote) => {\r\n      setNotes(notes.concat(returnedNote));\r\n      setNewNote(\"\");\r\n    });\r\n  };\r\n\r\n  // Event Handler -> updates the value of the input field of the form\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  // Event handler -> Toggles importance button on each item and updates the json server value\r\n  const handlebuttonToggle = (id) => {\r\n    const note = notes.find((n) => n.id === id);\r\n    // update the important flag to whatever it isnt current\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    // pass the updated note to the api\r\n    noteServices\r\n      .update(id, changedNote)\r\n      .then((returnedNote) => {\r\n        // update the notes list in react\r\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\r\n      })\r\n      .catch((error) => {\r\n        // if we were unable to update the note with the server show and error message\r\n        setErrorMessage(\r\n          `the note '${note.content}' was already deleted from server`\r\n        );\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n        setNotes(notes.filter((n) => n.id !== id));\r\n      });\r\n  };\r\n\r\n  // holds the notes to be shownbra\r\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <input value={newNote} onChange={handleNoteChange} />\r\n      <button type=\"submit\" onClick={addNote}>\r\n        save note\r\n      </button>\r\n      <button onClick={() => setShowAll(!showAll)}>\r\n        show {showAll ? \"Important\" : \"All\"}\r\n      </button>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note\r\n            key={note.id}\r\n            note={note}\r\n            toggleImportance={() => handlebuttonToggle(note.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}